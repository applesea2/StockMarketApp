@page "/"
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@using StockMarketApp.DTO

<PageTitle>Home</PageTitle>
<div class="searchContainer">
    <AutoComplete class="wide-search-box" TItem="SearchDTO" @bind-Value="searchTerm" DataProvider="Search" PropertyName="Name" Size="AutoCompleteSize.Large" Placeholder="What stock can we help you find?" OnChanged="(SearchDTO searchDTO) => OnItemSelected(searchDTO)">
    </AutoComplete> 
</div>

@if (isLoading)
{
    <p>Loading...</p>
}

else if (hasSearched && !isLoading)
{
    <p class="text-light">No results found</p>
}

@code
{
    private string? searchTerm;
    private SearchDTOResponse? searchDTOResponse;
    private bool isLoading = false;
    private bool hasSearched = false;
    private const int debounceTimeout = 500;
    private HttpClient? _httpClient;

    protected override void OnInitialized()
    {
        _httpClient = HttpClientFactory.CreateClient("ApiHttpClient");
        base.OnInitialized();
    }

    private async Task<AutoCompleteDataProviderResult<SearchDTO>> Search(AutoCompleteDataProviderRequest<SearchDTO> searchTerms)
    {
        try
        {
            string requestUrl = $"/api/StockData/search/{searchTerms.Filter.Value}";
            searchDTOResponse = await _httpClient.GetFromJsonAsync<SearchDTOResponse>(requestUrl);
            return await Task.FromResult(new AutoCompleteDataProviderResult<SearchDTO>
                {
                    Data = searchDTOResponse?.BestMatches,
                    TotalCount = searchDTOResponse?.BestMatches?.Count ?? 0
                });
        }
        catch (HttpRequestException ex)
        {
            // Handle HTTP errors (non-success status codes, network issues)
            Console.Error.WriteLine($"API call failed: {ex.Message}");
            searchDTOResponse = null; // Ensure response is null on error
            return new AutoCompleteDataProviderResult<SearchDTO>
                {
                    Data = Enumerable.Empty<SearchDTO>(),
                    TotalCount = 0
                };
        
        }
        catch (Exception ex) // Catch other potential errors (e.g., serialization)
        {
            Console.Error.WriteLine($"An error occurred: {ex.Message}");
            searchDTOResponse = null;
            return new AutoCompleteDataProviderResult<SearchDTO>
                {
                    Data = Enumerable.Empty<SearchDTO>(),
                    TotalCount = 0
                };
        }
        finally
        {
            isLoading = false;
            // StateHasChanged();
        }
    }

    private void HandleKeyDown(KeyboardEventArgs arg)
    {
        if (arg.Key == "Enter" && !string.IsNullOrWhiteSpace(searchTerm))
        {
            NavigateToDetails(searchTerm);
        }
    }

    private void OnItemSelected(SearchDTO selectedItem)
    {
        if (selectedItem == null || string.IsNullOrWhiteSpace(selectedItem.Symbol))
        {
            return;
        }
        NavigateToDetails(selectedItem.Symbol);
    }

    private void NavigateToDetails(string term)
    {
        if (string.IsNullOrWhiteSpace(term))
        {
            return;
        }
        NavigationManager.NavigateTo($"/StockDetails/{term}");
    }
}
